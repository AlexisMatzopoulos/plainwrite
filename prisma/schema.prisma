generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  history       History[]
  profile       Profile?
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                          String    @id @default(uuid())
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  user_id                     String    @unique
  subscription_plan           String?
  subscription_status         String?
  words_balance               Int       @default(500)
  extra_words_balance         Int       @default(0)
  stripe_customer_id          String?
  subscription_canceled       Boolean   @default(false)
  userStyle                   String?
  undetectable_style_id       String?
  words_limit                 Int       @default(500)
  words_per_request           Int       @default(500)
  subscription_paused         Boolean   @default(false)
  subscription_valid_until    DateTime?
  paystack_customer_code      String?
  paystack_subscription_code  String?
  paystack_authorization_code String?
  paystack_plan_code          String?
  billing_period              String?
  user                        User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model History {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  user_id        String
  original_text  String
  humanized_text String
  words_count    Int
  style_used     String?
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, createdAt])
}

enum UserRole {
  USER
  ADMIN
  TESTER
}
